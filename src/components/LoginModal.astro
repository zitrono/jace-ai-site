---
// Login modal component for private beta access
import Button from './Button.astro';

interface Props {
  class?: string;
  title?: string;
  message?: string;
  contactEmail?: string;
  id?: string;
}

const { 
  class: className = '',
  title = "Private Beta Access",
  message = "Ralph is currently in private beta. Please contact us for access to our AI-powered private equity platform.",
  contactEmail = "Konstantin@beneficious.com",
  id = "login-modal"
} = Astro.props;
---

<div 
  id={id} 
  class={`hidden fixed inset-0 z-50 flex items-center justify-center ${className}`}
  role="dialog" 
  aria-modal="true" 
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
>
  <div class="absolute inset-0 bg-black/50" onclick="closeLoginModal()" aria-hidden="true"></div>
  <div class="relative bg-card rounded-lg p-8 max-w-md w-full mx-4 border border-gray-700">
    <button 
      onclick="closeLoginModal()" 
      class="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors"
      aria-label="Close modal"
      tabindex="0"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <div class="text-center">
      <h2 id="modal-title" class="text-2xl font-bold text-white mb-4">{title}</h2>
      <p id="modal-description" class="text-secondary mb-6">
        {message}
      </p>
      <div class="flex flex-col sm:flex-row gap-4">
        <Button variant="secondary" onclick="closeLoginModal()" class="flex-1">
          Close
        </Button>
        <Button variant="primary" href={`mailto:${contactEmail}?subject=Ralph%20Beta%20Access%20Request&body=Hello%2C%20I%20would%20like%20to%20request%20access%20to%20Ralph%27s%20private%20beta.`} class="flex-1">
          Request Access
        </Button>
      </div>
    </div>
  </div>
</div>

<style>
  .bg-card {
    background-color: var(--pom-bg-card);
  }
  
  .text-secondary {
    color: var(--pom-text-secondary);
  }
  
  /* Smooth fade in animation */
  #login-modal:not(.hidden) {
    animation: fadeIn 0.2s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  /* Modal backdrop blur */
  #login-modal > div:first-child {
    backdrop-filter: blur(4px);
  }
</style>

<script>
  // Global functions for modal control
  window.showLoginModal = function() {
    const modal = document.getElementById('login-modal');
    if (modal) {
      modal.classList.remove('hidden');
      // Focus management - focus on first interactive element
      const firstButton = modal.querySelector('button');
      if (firstButton) {
        firstButton.focus();
      }
      // Store the previously focused element for return focus
      modal.setAttribute('data-previous-focus', document.activeElement ? document.activeElement.id || document.activeElement.tagName : '');
    }
  };

  window.closeLoginModal = function() {
    const modal = document.getElementById('login-modal');
    if (modal) {
      modal.classList.add('hidden');
      // Return focus to previously focused element
      const previousFocus = modal.getAttribute('data-previous-focus');
      if (previousFocus) {
        const elementToFocus = document.getElementById(previousFocus) || document.querySelector(previousFocus);
        if (elementToFocus && elementToFocus.focus) {
          elementToFocus.focus();
        }
      }
    }
  };

  // Enhanced keyboard handling for modal
  document.addEventListener('keydown', function(e) {
    const modal = document.getElementById('login-modal');
    if (modal && !modal.classList.contains('hidden')) {
      if (e.key === 'Escape') {
        closeLoginModal();
      }
      
      // Basic focus trap - keep focus within modal
      if (e.key === 'Tab') {
        const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    }
  });
</script>