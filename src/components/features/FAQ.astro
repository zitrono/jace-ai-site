---
/**
 * FAQ - Frequently Asked Questions section with collapsible items
 * 
 * Uses centralized utilities for animations, state, and focus management.
 * Follows enterprise architecture patterns for maintainability.
 * 
 * @example
 * <FAQ 
 *   title="Frequently asked questions"
 *   subtitle="Everything you need to know"
 *   faqs={[
 *     { id: 'q1', question: 'Question?', answer: 'Answer.' }
 *   ]}
 * />
 */

import Section from '../layout/Section.astro';
import type { BaseComponentProps } from '@/types/components';

interface FAQItem {
  id: string;
  question: string;
  answer: string;
}

export interface Props extends BaseComponentProps {
  /** Section title */
  title?: string;
  /** Section subtitle */
  subtitle?: string;
  /** Contact email for support */
  contactEmail?: string;
  /** Array of FAQ items */
  faqs?: FAQItem[];
  /** Whether to show contact CTA at the bottom */
  showContactCTA?: boolean;
  /** Whether to use animations */
  animated?: boolean;
  /** Whether multiple items can be open simultaneously */
  allowMultiple?: boolean;
}

const {
  class: className = '',
  title = 'Frequently asked questions',
  subtitle = 'Everything you need to know about Ralph\'s security and deployment',
  contactEmail: _contactEmail = 'Konstantin@beneficious.com',
  showContactCTA: _showContactCTA = true,
  animated: _animated = true,
  allowMultiple: _allowMultiple = true,
  faqs = [
    {
      id: 'data-confidentiality',
      question: 'How does Ralph keep our deal data confidential?',
      answer:
        'Your data stays on your servers. Ralph\'s AI agents run locally within your infrastructure, processing everything in-house. We never see, store, or have access to your deal information. Think of Ralph as software you install, not a service you send data to.',
    },
    {
      id: 'on-premise',
      question: 'Can we run Ralph on our own servers?',
      answer:
        'Yes, absolutely. Ralph is designed for on-premise deployment. You provide the servers, we provide the AI framework. This gives you complete control over your data, security, and compliance. We\'ll help you set it up.',
    },
    {
      id: 'security-standards',
      question: 'What security standards does Ralph follow?',
      answer:
        'Ralph inherits your existing security standards since it runs on your infrastructure. We follow secure development practices including code audits, penetration testing, and encrypted communications. The specifics depend on your deployment - we adapt to your requirements.',
    },
    {
      id: 'lp-confidential',
      question: 'How does Ralph handle LP confidential information?',
      answer:
        'LP data is treated with the same security as all your data - it never leaves your control. You can configure access permissions to ensure only authorized team members can query LP-sensitive information. Ralph\'s agents respect your existing data governance policies.',
    },
    {
      id: 'security-integration',
      question: 'Can we integrate Ralph with our existing security tools?',
      answer:
        'Yes. Ralph supports SAML/SSO authentication, integrates with your identity providers, and can log to your SIEM systems. We\'ll work with your IT team to ensure Ralph fits seamlessly into your security stack.',
    },
    {
      id: 'security-track-record',
      question: 'What\'s Ralph\'s track record on data security?',
      answer:
        'We\'re in private beta with select PE firms, building security-first from day one. While we don\'t have a decade-long track record yet, our architecture ensures your data never leaves your control - eliminating most security risks by design. We\'re happy to share our security documentation.',
    },
    {
      id: 'access-revocation',
      question: 'How quickly can we revoke access if needed?',
      answer:
        'Immediately. Since Ralph uses your authentication system, you can revoke access the same way you would for any employee - through your identity provider. Data access stops instantly. If you cancel Ralph entirely, just shut down the servers. You retain all your data.',
    },
    {
      id: 'data-training',
      question: 'Does Ralph use our data to improve its AI models?',
      answer:
        'No. Your data is never used to train or improve Ralph\'s models. Each deployment is isolated - what happens in your Ralph stays in your Ralph. We improve our product based on feedback and feature requests, not by analyzing your confidential information.',
    },
    {
      id: 'implementation-time',
      question: 'How long does Ralph implementation typically take?',
      answer:
        'Most deployments complete within 4-6 weeks. Week 1-2: Infrastructure setup and data source connections. Week 3-4: Agent configuration and testing. Week 5-6: Team training and go-live. Timeline varies based on data complexity and integration requirements.',
    },
    {
      id: 'technical-infrastructure',
      question: 'What technical infrastructure do we need?',
      answer:
        'Ralph runs on your cloud infrastructure (AWS, Azure, GCP) or on-premise servers. Minimum requirements: 16GB RAM, 4 CPU cores, 500GB storage for starter deployment. We\'ll help size your infrastructure based on portfolio size and data volume during the planning phase.',
    },
    {
      id: 'data-integration',
      question: 'How does Ralph integrate with our existing data systems?',
      answer:
        'Ralph connects to your data sources through secure APIs and adapters. Common integrations include: CRM systems, document repositories, email platforms, financial databases, and portfolio management tools. We handle the technical integration - no coding required from your team.',
    },
    {
      id: 'ongoing-support',
      question: 'What ongoing support do you provide?',
      answer:
        'Enterprise customers get a dedicated customer success manager, 24/7 technical support, quarterly strategic reviews, and continuous system monitoring. Essential tier includes email support and self-service resources. All customers receive regular product updates and security patches.',
    },
    {
      id: 'partial-deployment',
      question: 'Can we start with a subset of our portfolio?',
      answer:
        'Absolutely. Many clients start with 3-5 portfolio companies to test and refine the approach. This lets you validate value before full deployment and helps your team learn the system. You can expand to additional companies quarterly as you see results.',
    },
  ],
} = Astro.props;

// Generate component ID for state management
const _componentId = 'faq-component';
---

<Section class={className} spacing="lg">
    <div class="mx-auto max-w-4xl">
      <!-- Header -->
      <div class="text-center">
        <h2 class="text-4xl lg:text-5xl font-semibold text-primary">
          {title}
        </h2>
        <p class="mt-3 text-lg text-muted">
          {subtitle}
        </p>
      </div>

      <!-- FAQ List -->
      <dl class="mt-16 divide-y divide-white/10">
        {
          faqs.map((faq, index) => (
            <div 
              class={`faq-item ${index === 0 ? 'pt-0' : 'pt-6'} ${index === faqs.length - 1 ? 'pb-0' : 'pb-6'}`}
              data-faq-item
            >
              <dt>
                <button 
                  class="group flex w-full items-start justify-between text-left text-primary cursor-pointer"
                  type="button"
                  aria-expanded="false"
                  aria-controls={`faq-answer-${index}`}
                  data-faq-button
                >
                  <span class="text-lg leading-7 font-medium">{faq.question}</span>
                  <span class="ml-6 flex h-7 items-center relative">
                    <!-- Plus icon (shown when collapsed) -->
                    <svg 
                      class="size-6 transition-opacity duration-200"
                      data-icon="plus"
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke-width="1.5" 
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m6-6H6" />
                    </svg>
                    <!-- Minus icon (hidden by default) -->
                    <svg 
                      class="size-6 transition-opacity duration-200 opacity-0 absolute inset-0"
                      data-icon="minus"
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke-width="1.5" 
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" d="M6 12h12" />
                    </svg>
                  </span>
                </button>
              </dt>
              <dd 
                id={`faq-answer-${index}`}
                class="mt-2 pr-12 text-base text-secondary leading-6 overflow-hidden transition-all duration-300"
                style="max-height: 0;"
                data-faq-answer
                aria-hidden="true"
              >
                <div class="pb-4">
                  {faq.answer}
                </div>
              </dd>
            </div>
          ))
        }
      </dl>
    </div>
</Section>

<style>
  /* Ensure smooth height transitions */
  [data-faq-answer] {
    transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
  }
  
  [data-faq-answer][aria-hidden="false"] {
    opacity: 1;
  }
  
  [data-faq-answer][aria-hidden="true"] {
    opacity: 0;
  }
</style>

<script>
  // Client-side accordion functionality
  document.addEventListener('DOMContentLoaded', () => {
    const faqButtons = document.querySelectorAll('[data-faq-button]');
    
    faqButtons.forEach(button => {
      button.addEventListener('click', () => {
        const item = button.closest('[data-faq-item]');
        const answer = item?.querySelector('[data-faq-answer]') as HTMLElement;
        const plusIcon = button.querySelector('[data-icon="plus"]') as HTMLElement;
        const minusIcon = button.querySelector('[data-icon="minus"]') as HTMLElement;
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        if (answer) {
          if (isExpanded) {
            // Collapse
            answer.style.maxHeight = '0';
            answer.setAttribute('aria-hidden', 'true');
            button.setAttribute('aria-expanded', 'false');
            plusIcon.classList.remove('opacity-0');
            minusIcon.classList.add('opacity-0');
          } else {
            // Expand
            answer.style.maxHeight = answer.scrollHeight + 'px';
            answer.setAttribute('aria-hidden', 'false');
            button.setAttribute('aria-expanded', 'true');
            plusIcon.classList.add('opacity-0');
            minusIcon.classList.remove('opacity-0');
          }
        }
      });
    });
  });
</script>
