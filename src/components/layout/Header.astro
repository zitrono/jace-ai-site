---
/**
 * Header - Main site header with systematic alignment enforcement
 * 
 * Uses HeaderLayout and HeaderButton components to prevent misalignment.
 * Follows design token contract system for consistent sizing.
 * 
 * @example
 * <Header 
 *   logoText="ralph"
 *   logoHref="/ralph-web/"
 *   sticky={true}
 *   showCta={true}
 *   ctaText="Book a Demo"
 * />
 */

import HeaderLayout from './HeaderLayout.astro';
import HeaderButton from './HeaderButton.astro';
import MobileMenu from './MobileMenu.astro';
import Logo from '../primitives/Logo.astro';
import type { BaseComponentProps } from '@/types/components';
import { getButtonAction } from '@/config/site-config';

export interface Props extends BaseComponentProps {
  /** Whether the header should stick to the top when scrolling */
  sticky?: boolean;
  /** Whether the header should have a transparent background */
  transparent?: boolean;
  /** Whether to show the logo */
  showLogo?: boolean;
  /** Logo text content */
  logoText?: string;
  /** Logo link destination */
  logoHref?: string;
  /** Main navigation links */
  navLinks?: Array<{
    href: string;
    text: string;
    external?: boolean;
  }>;
  /** Whether to show CTA buttons */
  showCta?: boolean;
  /** Custom CTA button text */
  ctaText?: string;
  /** Custom login button text */
  loginText?: string;
}

const {
  class: className = '',
  sticky = true,
  transparent: _transparent = false,
  showLogo = true,
  logoText = 'ralph',
  logoHref = '/ralph-web/',
  navLinks = [
    { href: '/ralph-web/#product', text: 'Product' },
    { href: '/ralph-web/#pricing', text: 'Pricing' },
    { href: '/ralph-web/learn', text: 'Learn' },
  ],
  showCta = true,
  ctaText = 'Book a Demo',
  loginText = 'Log In',
  ...rest
} = Astro.props;

---

<HeaderLayout sticky={sticky} headerClass={className} {...rest}>
  {/* Logo */}
  {
    showLogo && (
      <a
        slot="logo"
        href={logoHref}
        class="inline-flex items-center rounded-base focus:outline-none focus:ring-2 focus:ring-primary-yellow focus:ring-offset-2 focus:ring-offset-neutral-700"
      >
        <span class="sr-only">{logoText}</span>
        <Logo class="text-text-primary text-[1.375rem] md:text-[1.75rem] lg:text-[2.25rem]" />
      </a>
    )
  }

  {/* Mobile Elements - Container-based slot */}
  <div slot="mobile" class="flex lg:hidden items-center gap-x-3">
    {
      showCta && (
        <HeaderButton
          variant="primary"
          {...getButtonAction('bookDemo')}
          class="touch-manipulation"
        >
          {ctaText}
        </HeaderButton>
      )
    }
    
    <button
      id="mobile-menu-button"
      type="button"
      class="inline-flex items-center justify-center rounded-base p-3 text-text-primary min-h-[44px] min-w-[44px] touch-manipulation focus:outline-none focus:ring-2 focus:ring-primary-yellow focus:ring-offset-2 focus:ring-offset-neutral-700"
      onclick="openMobileMenu()"
      aria-label="Open main menu"
      aria-expanded="false"
      aria-controls="mobile-menu"
      aria-haspopup="true"
    >
      <svg
        class="size-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
      </svg>
    </button>
  </div>

  {/* Desktop Navigation Links - Container-based slot */}
  <nav slot="navigation" class="flex gap-x-4" role="navigation" aria-label="Main navigation">
    {
      navLinks.map((link) => (
        <HeaderButton
          variant="nav"
          href={link.href}
          class="nav-link"
          {...(link.external && { target: '_blank', rel: 'noopener noreferrer' })}
        >
          {link.text}
        </HeaderButton>
      ))
    }
  </nav>

  {/* Desktop CTA Buttons - Container-based slot */}
  {
    showCta && (
      <div slot="actions" class="flex gap-x-4">
        <HeaderButton
          variant="secondary"
          id="login-button"
          data-test="secondary-button"
          {...getButtonAction('login')}
        >
          {loginText}
        </HeaderButton>
        <HeaderButton
          variant="primary"
          data-test="cta-button"
          {...getButtonAction('bookDemo')}
        >
          {ctaText}
        </HeaderButton>
      </div>
    )
  }
</HeaderLayout>

<!-- Mobile Menu Component - Outside header to prevent positioning conflicts -->
<MobileMenu 
  navigationLinks={navLinks}
  showCta={showCta}
  ctaText={ctaText}
  loginText={loginText}
/>
