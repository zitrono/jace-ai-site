---
/**
 * Header - Main site header with navigation and CTA buttons
 * @example
 * <Header 
 *   logoText="ralph"
 *   logoHref="/ralph-web/"
 *   sticky={true}
 *   showCta={true}
 *   ctaText="Book a Demo"
 * />
 */

import Button from '../primitives/Button.astro';
import MobileMenu from './MobileMenu.astro';
import type { BaseComponentProps } from '@/types/components';

export interface Props extends BaseComponentProps {
  /** Whether the header should stick to the top when scrolling */
  sticky?: boolean;
  /** Whether the header should have a transparent background */
  transparent?: boolean;
  /** Whether to show the logo */
  showLogo?: boolean;
  /** Logo text content */
  logoText?: string;
  /** Logo link destination */
  logoHref?: string;
  /** Main navigation links */
  navLinks?: Array<{
    href: string;
    text: string;
    external?: boolean;
  }>;
  /** Whether to show CTA buttons */
  showCta?: boolean;
  /** Custom CTA button text */
  ctaText?: string;
  /** Custom login button text */
  loginText?: string;
}

const {
  class: className = '',
  sticky = true,
  transparent = false,
  showLogo = true,
  logoText = 'ralph',
  logoHref = '/ralph-web/',
  navLinks = [
    { href: '/ralph-web/#product', text: 'Product' },
    { href: '/ralph-web/#pricing', text: 'Pricing' },
    { href: '/ralph-web/learn', text: 'Learn' },
  ],
  showCta = true,
  ctaText = 'Book a Demo',
  loginText = 'Log In',
  ...rest
} = Astro.props;

const headerClasses = [
  // Position
  sticky ? 'sticky top-0' : 'relative',
  // Layout and z-index
  'z-20 inset-x-0',
  // Background
  transparent ? 'bg-transparent' : 'bg-neutral-700/95 backdrop-blur-sm',
  // Transitions
  'transition-all duration-300',
  // Border for definition when not transparent
  !transparent && 'border-b border-neutral-600/50',
  className,
]
  .filter(Boolean)
  .join(' ');
---

<header class={headerClasses} {...rest}>
  {/* Skip link for accessibility */}
  <a
    href="#main-content"
    class="sr-only focus:not-sr-only focus:absolute focus:left-6 focus:top-6 focus:z-50 focus:rounded-base focus:bg-primary-yellow focus:px-component-base focus:py-component-sm focus:text-text-inverted focus:no-underline focus:outline-none focus:ring-2 focus:ring-primary-yellow focus:ring-offset-2 focus:ring-offset-neutral-700"
  >
    Skip to main content
  </a>

  <nav
    id="navigation"
    class="mx-auto flex max-w-7xl items-center justify-between"
    role="navigation"
    aria-label="Main navigation"
  >
    <div
      class="flex items-center justify-between w-full px-6 py-3 lg:px-8 lg:py-4 transition-all duration-300 h-mobile-header-inner"
    >
      {/* Logo */}
      {
        showLogo && (
          <div class="flex lg:flex-1">
            <a
              href={logoHref}
              class="inline-flex items-center -m-1.5 p-1.5 rounded-base focus:outline-none focus:ring-2 focus:ring-primary-yellow focus:ring-offset-2 focus:ring-offset-neutral-700"
            >
              <span class="sr-only">{logoText}</span>
              <span class="text-text-primary font-bold text-2xl">{logoText}</span>
            </a>
          </div>
        )
      }

      {/* Mobile CTA Button */}
      {
        showCta && (
          <div class="flex lg:hidden flex-1 justify-end mr-3">
            <Button
              variant="primary"
              size="sm"
              class="min-h-[44px] min-w-[44px] touch-manipulation"
            >
              <span class="hidden min-[360px]:inline">{ctaText}</span>
              <span class="inline min-[360px]:hidden">Book Demo</span>
            </Button>
          </div>
        )
      }

      {/* Mobile Menu Button */}
      <div class="flex lg:hidden">
        <button
          id="mobile-menu-button"
          type="button"
          class="inline-flex items-center justify-center rounded-base p-3 text-text-primary min-h-[44px] min-w-[44px] touch-manipulation focus:outline-none focus:ring-2 focus:ring-primary-yellow focus:ring-offset-2 focus:ring-offset-neutral-700"
          onclick="openMobileMenu()"
          aria-label="Open main menu"
          aria-expanded="false"
          aria-controls="mobile-menu"
          aria-haspopup="true"
        >
          <svg
            class="size-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
          </svg>
        </button>
      </div>

      {/* Desktop Navigation */}
      <nav class="hidden lg:flex lg:gap-x-12" role="navigation" aria-label="Main navigation">
        {
          navLinks.map((link) => (
            <a
              href={link.href}
              class="nav-link text-text-primary hover:text-primary-yellow transition-colors duration-200 font-medium focus:outline-none focus:underline focus:underline-offset-4"
              {...(link.external && { target: '_blank', rel: 'noopener noreferrer' })}
            >
              {link.text}
            </a>
          ))
        }
      </nav>

      {/* Desktop CTA Buttons */}
      {
        showCta && (
          <div class="hidden lg:flex lg:flex-1 lg:justify-end lg:gap-x-6">
            <Button
              variant="secondary"
              id="login-button"
              data-test="secondary-button"
              class="focus:ring-2 focus:ring-neutral-400 focus:ring-offset-2 focus:ring-offset-neutral-700"
            >
              {loginText}
            </Button>
            <Button
              variant="primary"
              size="lg"
              data-test="cta-button"
              class="focus:ring-2 focus:ring-primary-yellow focus:ring-offset-2 focus:ring-offset-neutral-700"
            >
              {ctaText}
            </Button>
          </div>
        )
      }
    </div>
  </nav>
</header>

<!-- Mobile Menu Component - Outside header to prevent positioning conflicts -->
<MobileMenu 
  navigationLinks={navLinks}
  showCta={showCta}
  ctaText={ctaText}
  loginText={loginText}
/>
