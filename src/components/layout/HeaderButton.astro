---
/**
 * HeaderButton - Header-specialized button component with enforced alignment
 * 
 * Prevents misalignment by constraining button configurations to header-safe variants.
 * Uses design token contract system to ensure consistent height/font/weight.
 * 
 * @example
 * <HeaderButton variant="nav" href="/product">Product</HeaderButton>
 * <HeaderButton variant="primary">Book Demo</HeaderButton>
 */

import type { BaseComponentProps, InteractiveComponentProps } from '@/types/components';
import { 
  type HeaderButtonVariant,
  getHeaderButtonClasses 
} from '@/types/design-tokens';

interface Props extends BaseComponentProps, InteractiveComponentProps {
  /** Header-specific button variant (constrained) */
  variant: HeaderButtonVariant;
  /** Link destination (makes it an anchor) */
  href?: string;
  /** Click handler (makes it a button) */
  onclick?: string;
  /** Button ID for testing/scripting */
  id?: string;
  /** Data test attribute */
  'data-test'?: string;
  /** External link properties */
  target?: string;
  rel?: string;
}

const {
  variant,
  href,
  onclick,
  id,
  'data-test': dataTest,
  target,
  rel,
  class: className = '',
  disabled = false,
  tabIndex,
  ariaLabel,
  ariaDescribedBy,
  ...rest
} = Astro.props;

// Generate type-safe classes from design tokens
const designClasses = getHeaderButtonClasses(variant);

// Base classes for all header buttons (enforced consistency)
const baseClasses = [
  'inline-flex items-center justify-center',
  'font-medium rounded-md border',
  'transition-all duration-200',
  'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-neutral-700',
  'disabled:opacity-50 disabled:cursor-not-allowed',
  'cursor-pointer',
  'whitespace-nowrap',
].join(' ');

// Variant-specific styling
const variantClasses = {
  nav: 'bg-transparent text-text-primary hover:text-primary-yellow focus:ring-primary-yellow/50 border-transparent',
  primary: 'bg-accent text-accent-text hover:bg-accent/90 focus:ring-accent/50 border-transparent btn-primary',
  secondary: 'bg-gray-600 text-white hover:bg-gray-500 focus:ring-gray-500/50 border-transparent btn-secondary',
};

// Combine all classes
const allClasses = `${baseClasses} ${designClasses} ${variantClasses[variant]} ${className}`.trim();

// Element attributes
const elementProps = {
  class: allClasses,
  id,
  'data-test': dataTest,
  ...(disabled && { 'aria-disabled': 'true' }),
  ...(tabIndex && { tabindex: tabIndex }),
  ...(ariaLabel && { 'aria-label': ariaLabel }),
  ...(ariaDescribedBy && { 'aria-describedby': ariaDescribedBy }),
  ...rest,
};
---

{
  href ? (
    <a
      href={href}
      {...elementProps}
      {...(target && { target })}
      {...(rel && { rel })}
    >
      <slot />
    </a>
  ) : (
    <button
      type="button"
      {...elementProps}
      {...(onclick && { onclick })}
      {...(disabled && { disabled })}
    >
      <slot />
    </button>
  )
}