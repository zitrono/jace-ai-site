---
/**
 * MobileMenu - Mobile navigation menu component
 * 
 * A responsive navigation menu that displays on mobile devices.
 * Hidden on desktop (lg breakpoint and above).
 * 
 * @example
 * <MobileMenu 
 *   navigationLinks={links}
 *   showCta={true}
 *   ctaText="Book a Demo"
 *   loginText="Log In"
 * />
 */

import type { BaseComponentProps } from '@/types/components';

export interface Props extends BaseComponentProps {
  /** Navigation links to display */
  navigationLinks: Array<{
    href: string;
    text: string;
    external?: boolean;
  }>;
  /** Whether to show CTA buttons */
  showCta?: boolean;
  /** CTA button text */
  ctaText?: string;
  /** Login button text */
  loginText?: string;
}

const {
  navigationLinks,
  showCta = true,
  ctaText = 'Book a Demo',
  loginText = 'Log In',
  class: className = '',
  ...rest
} = Astro.props;
---

<!-- Mobile Menu Container - Bootstrap-style responsive wrapper -->
<div class="d-block d-lg-none">
  <!-- Mobile Menu - Hidden on lg screens and above -->
  <div 
    id="mobile-menu" 
    class="hidden fixed inset-0 z-50 lg:hidden mobile-menu-overlay" 
    data-mobile-menu-overlay
    {...rest}
  >
  <!-- Backdrop - Clicks close menu -->
  <div 
    class="absolute inset-0"
    onclick="closeMobileMenu()"
    aria-label="Close menu"
    data-backdrop
  >
    <!-- Visual overlay effect -->
    <div class="absolute inset-0 bg-black bg-opacity-50"></div>
  </div>
  
  <!-- Menu Panel -->
  <div 
    class={`fixed right-0 top-0 h-full w-full max-w-[320px] bg-neutral-600 p-6 shadow-2xl ${className}`}
    data-mobile-menu-panel
  >
    <!-- Header with logo and close button -->
    <div class="flex justify-between items-center mb-6">
      <a href="/ralph-web/" class="text-2xl font-bold text-white hidden max-[359px]:block">
        ralph
      </a>
      <button
        type="button"
        class="inline-flex items-center justify-center rounded-md p-2 text-white hover:bg-neutral-500 focus:outline-none focus:ring-2 focus:ring-white"
        onclick="closeMobileMenu()"
        aria-label="Close menu"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Navigation -->
    <nav class="flex flex-col space-y-4">
      {navigationLinks.map((link) => (
        <a
          href={link.href}
          class="text-[18px] font-medium text-white hover:text-gray-300 transition-colors"
          onclick="closeMobileMenu()"
          {...(link.external && { target: '_blank', rel: 'noopener noreferrer' })}
        >
          {link.text}
        </a>
      ))}
      
      {showCta && (
        <div class="mt-6 space-y-3">
          <button
            type="button"
            class="btn-secondary w-full rounded-md bg-neutral-500 px-4 py-3 text-base font-medium text-white hover:bg-neutral-400 focus:outline-none focus:ring-2 focus:ring-white"
            onclick="window.location.href='/ralph-web/#'"
          >
            {loginText}
          </button>
          <button
            type="button"
            class="btn-primary w-full rounded-md bg-accent px-4 py-3 text-base font-medium text-accent-text hover:bg-yellow-300 focus:outline-none focus:ring-2 focus:ring-yellow-400"
            onclick="window.location.href='/ralph-web/#'"
          >
            {ctaText}
          </button>
        </div>
      )}
    </nav>
  </div>
  </div>
</div>

<script>
  // Global functions for mobile menu (matches Jace implementation)
  function openMobileMenu() {
    const menu = document.getElementById('mobile-menu');
    const menuButton = document.getElementById('mobile-menu-button');
    
    if (menu) {
      menu.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      if (menuButton) {
        menuButton.setAttribute('aria-expanded', 'true');
      }
    }
  }
  
  function closeMobileMenu() {
    const menu = document.getElementById('mobile-menu');
    const menuButton = document.getElementById('mobile-menu-button');
    
    if (menu) {
      menu.classList.add('hidden');
      document.body.style.overflow = '';
      
      if (menuButton) {
        menuButton.setAttribute('aria-expanded', 'false');
      }
    }
  }
  
  // Make functions globally available
  window.openMobileMenu = openMobileMenu;
  window.closeMobileMenu = closeMobileMenu;
  
  // Handle escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const menu = document.getElementById('mobile-menu');
      if (menu && !menu.classList.contains('hidden')) {
        closeMobileMenu();
      }
    }
  });
  
  // iOS viewport height fix
  function updateViewportHeight() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
  }
  
  updateViewportHeight();
  window.addEventListener('resize', updateViewportHeight);
</script>

