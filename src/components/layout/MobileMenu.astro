---
/**
 * MobileMenu - Mobile navigation menu component
 * 
 * A responsive navigation menu that displays on mobile devices.
 * Hidden on desktop (lg breakpoint and above).
 * 
 * @example
 * <MobileMenu 
 *   navigationLinks={links}
 *   showCta={true}
 *   ctaText="Book a Demo"
 *   loginText="Log In"
 * />
 */

import type { BaseComponentProps } from '@/types/components';
import Button from '../primitives/Button.astro';
import { getButtonAction } from '@/config/site-config';

export interface Props extends BaseComponentProps {
  /** Navigation links to display */
  navigationLinks: Array<{
    href: string;
    text: string;
    external?: boolean;
  }>;
  /** Whether to show CTA buttons */
  showCta?: boolean;
  /** CTA button text */
  ctaText?: string;
  /** Login button text */
  loginText?: string;
}

const {
  navigationLinks,
  showCta = true,
  ctaText = 'Book a Demo',
  loginText = 'Log In',
  class: className = '',
  ...rest
} = Astro.props;
---

<!-- Mobile Menu Container -->
<div 
  id="mobile-menu" 
  class="hidden fixed inset-0 z-50 lg:hidden" 
  data-mobile-menu-overlay
  {...rest}
>
  <!-- Backdrop - Semi-transparent overlay -->
  <div 
    class="fixed inset-0 bg-black bg-opacity-50"
    onclick="closeMobileMenu()"
    aria-label="Close menu"
    data-backdrop
  ></div>
  
  <!-- Menu Panel - Right-aligned drawer -->
  <div 
    class={`fixed right-0 top-0 h-full w-full max-w-xs bg-background p-6 shadow-2xl ${className}`}
    data-mobile-menu-panel
  >
    <!-- Content container with proper flex layout -->
    <div class="flex h-full flex-col">
      <!-- Header with logo and close button -->
      <div class="flex items-center justify-between">
        <a href="/ralph-web/" class="text-[1.375rem] font-bold text-white">
          ralph
        </a>
        <button
          type="button"
          class="-m-2.5 rounded-md p-2.5 text-white"
          onclick="closeMobileMenu()"
          aria-label="Close menu"
        >
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <!-- Navigation container -->
      <nav class="mt-6 flex flex-1 flex-col">
        <!-- Navigation links -->
        <div class="space-y-2">
          {navigationLinks.map((link) => (
            <a
              href={link.href}
              class="block rounded-lg px-0 py-2 text-base font-semibold leading-7 text-white hover:bg-neutral-700 hover:px-3 transition-all duration-200"
              onclick="closeMobileMenu()"
              {...(link.external && { target: '_blank', rel: 'noopener noreferrer' })}
            >
              {link.text}
            </a>
          ))}
        </div>
        
        <!-- CTA buttons at bottom -->
        {showCta && (
          <div class="mt-auto space-y-2 py-6">
            <Button
              variant="secondary"
              size="md"
              fullWidth={true}
              {...getButtonAction('mobileLogin')}
            >
              {loginText}
            </Button>
            <Button
              variant="primary"
              size="md"
              fullWidth={true}
              {...getButtonAction('bookDemo')}
              onclick="closeMobileMenu();"
            >
              {ctaText}
            </Button>
          </div>
        )}
      </nav>
    </div>
  </div>
</div>

<script>
  // Global functions for mobile menu (matches Jace implementation)
  function openMobileMenu() {
    const menu = document.getElementById('mobile-menu');
    const menuButton = document.getElementById('mobile-menu-button');
    
    if (menu) {
      menu.classList.remove('hidden');
      // Proper scroll lock - just overflow hidden like Jace
      document.body.style.overflow = 'hidden';
      
      if (menuButton) {
        menuButton.setAttribute('aria-expanded', 'true');
      }
    }
  }
  
  function closeMobileMenu() {
    const menu = document.getElementById('mobile-menu');
    const menuButton = document.getElementById('mobile-menu-button');
    
    if (menu) {
      menu.classList.add('hidden');
      // Remove scroll lock
      document.body.style.overflow = '';
      
      if (menuButton) {
        menuButton.setAttribute('aria-expanded', 'false');
      }
    }
  }
  
  // Make functions globally available
  window.openMobileMenu = openMobileMenu;
  window.closeMobileMenu = closeMobileMenu;
  
  // Handle escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const menu = document.getElementById('mobile-menu');
      if (menu && !menu.classList.contains('hidden')) {
        closeMobileMenu();
      }
    }
  });
  
  // iOS viewport height fix
  function updateViewportHeight() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
  }
  
  updateViewportHeight();
  window.addEventListener('resize', updateViewportHeight);
</script>

