---
import type {
  BaseComponentProps,
  InteractiveComponentProps,
  ButtonVariant,
  SizeVariant,
  ButtonState,
} from '../../types/components';
import { 
  getHeaderButtonClasses,
  isValidHeaderVariant,
  type HeaderButtonVariant 
} from '@/types/design-tokens';

interface Props extends BaseComponentProps, InteractiveComponentProps {
  /** Button variant style */
  variant: ButtonVariant;
  /** Button size */
  size?: SizeVariant;
  /** Button state */
  state?: ButtonState;
  /** Loading state */
  loading?: boolean;
  /** Click handler */
  onclick?: string;
  /** Button ID */
  id?: string;
  /** Test attribute */
  'data-test'?: string;
  /** Link href for anchor behavior */
  href?: string;
  /** Button type */
  type?: 'button' | 'submit' | 'reset';
  /** Full width button */
  fullWidth?: boolean;
  /** Icon slot name */
  icon?: string;
  /** Right icon slot name */
  rightIcon?: string;
  /** Force header-specific styling with design token contract */
  useHeaderContract?: boolean;
  /** External link properties */
  target?: string;
  rel?: string;
}

const {
  variant,
  size = 'md',
  state = 'default',
  loading = false,
  disabled = false,
  class: className = '',
  onclick,
  id,
  'data-test': dataTest,
  href,
  type = 'button',
  fullWidth = false,
  icon,
  rightIcon,
  useHeaderContract = false,
  target,
  rel,
  tabIndex,
  ariaLabel,
  ariaDescribedBy,
  style,
  data,
  ...rest
} = Astro.props;

// Determine actual disabled state
const isDisabled = disabled || state === 'disabled' || loading;

// Size classes using design tokens - Height normalization for alignment with responsive support
const sizeClasses = {
  xs: 'h-8 px-xs text-xs leading-none', // 32px height - minimal buttons
  sm: 'h-9 px-sm text-sm leading-none md:h-9 md:px-sm md:text-sm', // 36px height - compact buttons  
  md: 'h-9 px-sm text-sm leading-none md:h-10 md:px-base md:text-base font-medium', // Responsive: 36px mobile, 40px desktop
  lg: 'h-10 px-base text-base leading-none md:h-12 md:px-lg md:text-lg font-medium', // Responsive: 40px mobile, 48px desktop
  xl: 'h-12 px-lg text-lg leading-none md:h-14 md:px-xl md:text-xl font-medium', // Responsive: 48px mobile, 56px desktop
};

// Variant classes using design tokens
const variantClasses = {
  primary:
    'bg-accent text-accent-text hover:bg-accent/90 focus:ring-accent/50 border-transparent',
  secondary:
    'bg-gray-600 text-white hover:bg-gray-500 focus:ring-gray-500/50 border-transparent',
  outline:
    'bg-transparent text-primary border-neutral-600 hover:bg-neutral-600 focus:ring-neutral-500/50',
  ghost:
    'bg-transparent text-secondary hover:bg-neutral-600 focus:ring-neutral-500/50 border-transparent',
  nav:
    'bg-transparent text-text-primary hover:text-primary-yellow focus:ring-primary-yellow/50 border-transparent',
  danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500/50 border-transparent',
};

// State classes
const stateClasses = {
  default: '',
  loading: 'cursor-wait',
  disabled: 'opacity-50 cursor-not-allowed',
};

// Generate classes based on whether we're using header contract
let classes: string;

if (useHeaderContract && isValidHeaderVariant(variant)) {
  // Use design token contract for header buttons
  const designClasses = getHeaderButtonClasses(variant as HeaderButtonVariant);
  classes = [
    // Base button styles
    'inline-flex items-center justify-center',
    'font-medium rounded-md border',
    'transition-all duration-200',
    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-neutral-700',
    'disabled:opacity-50 disabled:cursor-not-allowed',
    'cursor-pointer',
    'whitespace-nowrap',
    // Design token classes
    designClasses,
    // Variant classes
    variantClasses[variant],
    // State classes
    stateClasses[state],
    // Full width
    fullWidth && 'w-full',
    // Loading state
    loading && 'cursor-wait',
    // POM compatibility classes
    variant === 'primary' && 'btn-primary',
    variant === 'secondary' && 'btn-secondary',
    // Custom classes
    className,
  ]
    .filter(Boolean)
    .join(' ');
} else {
  // Standard button classes
  classes = [
    // Base button styles
    'inline-flex items-center justify-center',
    'font-medium rounded-md border',
    'transition-all duration-200',
    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-neutral-700',
    'disabled:opacity-50 disabled:cursor-not-allowed',
    'active:scale-[0.99]',
    'cursor-pointer',
    // Size classes
    sizeClasses[size],
    // Variant classes
    variantClasses[variant],
    // State classes
    stateClasses[state],
    // Full width
    fullWidth && 'w-full',
    // Loading state
    loading && 'cursor-wait',
    // POM compatibility classes
    variant === 'primary' && 'btn-primary',
    variant === 'secondary' && 'btn-secondary',
    size === 'sm' && 'btn-sm',
    size === 'lg' && 'btn-lg',
    // Custom classes
    className,
  ]
    .filter(Boolean)
    .join(' ');
}

// Data attributes
const dataAttributes = data
  ? Object.entries(data).reduce(
      (acc, [key, value]) => {
        acc[`data-${key}`] = value;
        return acc;
      },
      {} as Record<string, string>
    )
  : {};

// ARIA attributes
const ariaAttributes = {
  ...(ariaLabel && { 'aria-label': ariaLabel }),
  ...(ariaDescribedBy && { 'aria-describedby': ariaDescribedBy }),
  ...(loading && { 'aria-busy': 'true' }),
  ...(isDisabled && { 'aria-disabled': 'true' }),
};
---

{
  href ? (
    <a
      href={href}
      class={classes}
      id={id}
      data-test={dataTest}
      style={style}
      tabindex={tabIndex}
      {...ariaAttributes}
      {...dataAttributes}
      {...(target && { target })}
      {...(rel && { rel })}
      {...rest}
    >
      {icon && (
        <span class="mr-2" aria-hidden="true">
          <slot name="icon" />
        </span>
      )}
      <slot />
      {rightIcon && (
        <span class="ml-2" aria-hidden="true">
          <slot name="right-icon" />
        </span>
      )}
    </a>
  ) : (
    <button
      type={type}
      class={classes}
      onclick={onclick}
      id={id}
      data-test={dataTest}
      style={style}
      disabled={isDisabled}
      tabindex={tabIndex}
      {...ariaAttributes}
      {...dataAttributes}
      {...rest}
    >
      {loading && (
        <svg
          class="animate-spin -ml-1 mr-3 h-4 w-4"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
          />
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          />
        </svg>
      )}
      {icon && !loading && (
        <span class="mr-2" aria-hidden="true">
          <slot name="icon" />
        </span>
      )}
      <slot />
      {rightIcon && (
        <span class="ml-2" aria-hidden="true">
          <slot name="right-icon" />
        </span>
      )}
    </button>
  )
}
