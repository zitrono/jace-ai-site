---
import type { BaseComponentProps, CardVariant, PaddingSize } from '../../types/components';

interface Props extends BaseComponentProps {
  /** Card variant style */
  variant?: CardVariant;
  /** Legacy dark/light variant for backwards compatibility */
  legacyVariant?: 'dark' | 'light';
  /** Enable hover effects */
  hover?: boolean;
  /** Padding size */
  padding?: PaddingSize;
  /** Whether the card is clickable */
  clickable?: boolean;
  /** Card border radius */
  rounded?: 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  /** Shadow intensity */
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
}

const {
  variant = 'default',
  legacyVariant,
  hover = false,
  padding = 'md',
  clickable = false,
  rounded = 'xl',
  shadow = 'none',
  class: className = '',
  style,
  data,
  ...rest
} = Astro.props;

// Handle legacy variant mapping
const actualVariant = legacyVariant === 'light' ? 'elevated' : variant;

// Padding classes
const paddingClasses = {
  none: 'p-0',
  sm: 'p-4',
  md: 'p-6',
  lg: 'p-8',
  xl: 'p-10',
};

// Variant classes using design tokens
const variantClasses = {
  default: 'bg-card border border-neutral-600',
  elevated: 'bg-white border border-neutral-200 shadow-lg',
  outlined: 'bg-transparent border-2 border-neutral-600',
  filled: 'bg-secondary border border-neutral-500',
};

// Rounded classes
const roundedClasses = {
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  xl: 'rounded-xl',
  '2xl': 'rounded-2xl',
};

// Shadow classes
const shadowClasses = {
  none: '',
  sm: 'shadow-sm',
  md: 'shadow-md',
  lg: 'shadow-lg',
  xl: 'shadow-xl',
};

// Combine all classes
const classes = [
  // Base card styles
  'relative',
  'transition-all duration-200',
  // POM compatibility class
  'card',
  // Variant classes
  variantClasses[actualVariant],
  // Padding
  paddingClasses[padding],
  // Border radius
  roundedClasses[rounded],
  // Shadow
  shadowClasses[shadow],
  // Hover effects
  hover &&
    'hover:shadow-lg hover:scale-[1.02] hover:bg-secondary transition-colors duration-300 cursor-pointer',
  clickable && 'cursor-pointer focus:ring-2 focus:ring-accent/50 focus:outline-none',
  // Legacy light variant styles
  legacyVariant === 'light' &&
    'bg-white shadow-lg border border-neutral-200 [&_h3]:text-neutral-900 [&_h4]:text-neutral-900 [&_p]:text-neutral-600',
  // Custom classes
  className,
]
  .filter(Boolean)
  .join(' ');

// Data attributes
const dataAttributes = data
  ? Object.entries(data).reduce(
      (acc, [key, value]) => {
        acc[`data-${key}`] = value;
        return acc;
      },
      {} as Record<string, string>
    )
  : {};
---

<div
  class={classes}
  style={style}
  tabindex={clickable ? 0 : undefined}
  role={clickable ? 'button' : undefined}
  {...dataAttributes}
  {...rest}
>
  <slot name="header" />
  <div class="empty:hidden">
    <slot />
  </div>
  <slot name="footer" />
</div>
