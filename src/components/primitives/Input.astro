---
import type {
  BaseComponentProps,
  InteractiveComponentProps,
  ValidationState,
  InputType,
  SizeVariant,
} from '../../types/components';

interface Props extends BaseComponentProps, InteractiveComponentProps {
  /** Input type */
  type?: InputType;
  /** Input size */
  size?: SizeVariant;
  /** Validation state */
  state?: ValidationState;
  /** Input value */
  value?: string;
  /** Default value */
  defaultValue?: string;
  /** Placeholder text */
  placeholder?: string;
  /** Input name */
  name?: string;
  /** Input ID */
  id?: string;
  /** Required field */
  required?: boolean;
  /** Readonly field */
  readonly?: boolean;
  /** Autocomplete attribute */
  autocomplete?: string;
  /** Pattern for validation */
  pattern?: string;
  /** Minimum length */
  minlength?: number;
  /** Maximum length */
  maxlength?: number;
  /** Minimum value (for number inputs) */
  min?: number;
  /** Maximum value (for number inputs) */
  max?: number;
  /** Step value (for number inputs) */
  step?: number;
  /** Label text */
  label?: string;
  /** Helper text */
  helperText?: string;
  /** Error message */
  errorMessage?: string;
  /** Success message */
  successMessage?: string;
  /** Warning message */
  warningMessage?: string;
  /** Hide label visually but keep for screen readers */
  labelHidden?: boolean;
  /** Full width input */
  fullWidth?: boolean;
  /** Input event handlers */
  oninput?: string;
  onchange?: string;
  onfocus?: string;
  onblur?: string;
}

const {
  type = 'text',
  size = 'md',
  state = 'default',
  value,
  defaultValue,
  placeholder,
  name,
  id,
  required = false,
  readonly = false,
  disabled = false,
  autocomplete,
  pattern,
  minlength,
  maxlength,
  min,
  max,
  step,
  label,
  helperText,
  errorMessage,
  successMessage,
  warningMessage,
  labelHidden = false,
  fullWidth = false,
  class: className = '',
  style,
  data,
  tabIndex,
  ariaLabel,
  ariaDescribedBy,
  oninput,
  onchange,
  onfocus,
  onblur,
  ...rest
} = Astro.props;

// Generate unique ID if not provided
const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
const helperId = `${inputId}-helper`;

// Size classes
const sizeClasses = {
  xs: 'h-8 px-3 text-xs',
  sm: 'h-9 px-3 text-sm',
  md: 'h-10 px-4 text-sm',
  lg: 'h-11 px-4 text-base',
  xl: 'h-12 px-5 text-lg',
};

// Label size classes
const labelSizeClasses = {
  xs: 'text-xs',
  sm: 'text-sm',
  md: 'text-sm',
  lg: 'text-base',
  xl: 'text-lg',
};

// State classes
const stateClasses = {
  default: 'border-neutral-600 focus:border-primary-yellow focus:ring-primary-yellow/50',
  error: 'border-red-500 focus:border-red-500 focus:ring-red-500/50',
  success: 'border-green-500 focus:border-green-500 focus:ring-green-500/50',
  warning: 'border-yellow-500 focus:border-yellow-500 focus:ring-yellow-500/50',
};

// Icon classes based on state
const stateIconClasses = {
  default: '',
  error: 'text-red-500',
  success: 'text-green-500',
  warning: 'text-yellow-500',
};

// Combine input classes
const inputClasses = [
  // Base styles
  'block w-full rounded-md border bg-neutral-700 text-pom-text-primary',
  'placeholder:text-pom-text-muted',
  'transition-colors duration-200',
  'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-neutral-700',
  'disabled:opacity-50 disabled:cursor-not-allowed',
  'readonly:bg-neutral-600 readonly:cursor-default',
  // Size classes
  sizeClasses[size],
  // State classes
  stateClasses[state],
  // Full width
  fullWidth && 'w-full',
  // Custom classes
  className,
]
  .filter(Boolean)
  .join(' ');

// Label classes
const labelClasses = [
  'block font-medium text-pom-text-primary mb-1',
  labelSizeClasses[size],
  labelHidden && 'sr-only',
]
  .filter(Boolean)
  .join(' ');

// Helper text classes
const helperClasses = [
  'mt-1 text-xs',
  state === 'error'
    ? 'text-red-500'
    : state === 'success'
      ? 'text-green-500'
      : state === 'warning'
        ? 'text-yellow-500'
        : 'text-pom-text-muted',
]
  .filter(Boolean)
  .join(' ');

// Get current message based on state
const currentMessage =
  (state === 'error' && errorMessage) ||
  (state === 'success' && successMessage) ||
  (state === 'warning' && warningMessage) ||
  helperText;

// Data attributes
const dataAttributes = data
  ? Object.entries(data).reduce(
      (acc, [key, value]) => {
        acc[`data-${key}`] = value;
        return acc;
      },
      {} as Record<string, string>
    )
  : {};

// ARIA attributes
const ariaAttributes = {
  ...(ariaLabel && { 'aria-label': ariaLabel }),
  ...(ariaDescribedBy && { 'aria-describedby': ariaDescribedBy }),
  ...(currentMessage && { 'aria-describedby': `${helperId} ${ariaDescribedBy || ''}`.trim() }),
  ...(state === 'error' && { 'aria-invalid': 'true' }),
  ...(required && { 'aria-required': 'true' }),
};

// Input attributes
const inputAttributes = {
  type,
  id: inputId,
  name,
  value,
  defaultValue,
  placeholder,
  required,
  readonly,
  disabled,
  autocomplete,
  pattern,
  minlength,
  maxlength,
  min,
  max,
  step,
  tabindex: tabIndex,
  style,
  oninput,
  onchange,
  onfocus,
  onblur,
  ...ariaAttributes,
  ...dataAttributes,
  ...rest,
};
---

<div class={fullWidth ? 'w-full' : ''}>
  {
    label && (
      <label for={inputId} class={labelClasses}>
        {label}
        {required && (
          <span class="text-red-500 ml-1" aria-label="required">
            *
          </span>
        )}
      </label>
    )
  }

  <div class="relative">
    <input class={inputClasses} {...inputAttributes} />

    {/* State icon */}
    {
      state !== 'default' && (
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          {state === 'error' && (
            <svg
              class={`h-4 w-4 ${stateIconClasses.error}`}
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z"
                clip-rule="evenodd"
              />
            </svg>
          )}
          {state === 'success' && (
            <svg
              class={`h-4 w-4 ${stateIconClasses.success}`}
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clip-rule="evenodd"
              />
            </svg>
          )}
          {state === 'warning' && (
            <svg
              class={`h-4 w-4 ${stateIconClasses.warning}`}
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                clip-rule="evenodd"
              />
            </svg>
          )}
        </div>
      )
    }
  </div>

  {/* Helper/Error text */}
  {
    currentMessage && (
      <p id={helperId} class={helperClasses}>
        {currentMessage}
      </p>
    )
  }
</div>

<style>
  /* Enhanced focus styles for better accessibility */
  input:focus {
    box-shadow: 0 0 0 3px var(--tw-ring-color);
  }

  /* Ensure consistent appearance across browsers */
  input[type='search']::-webkit-search-decoration,
  input[type='search']::-webkit-search-cancel-button,
  input[type='search']::-webkit-search-results-button,
  input[type='search']::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  /* Number input spinner styling */
  input[type='number']::-webkit-outer-spin-button,
  input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield;
  }
</style>
