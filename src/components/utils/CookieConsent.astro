---
/**
 * Cookie consent banner component matching original implementation
 *
 * @example
 * ```astro
 * <CookieConsent
 *   title="Cookie Preferences"
 *   position="bottom-left"
 *   privacyLink="/privacy"
 * />
 * ```
 */

import type { BaseComponentProps } from '@/types/components';

export interface Props extends BaseComponentProps {
  /** Title of the cookie banner */
  title?: string;
  /** Main message text */
  message?: string;
  /** Privacy policy link */
  privacyLink?: string;
  /** Position of the banner */
  position?: 'bottom-left' | 'bottom-right' | 'bottom-center';
  /** HTML id attribute */
  id?: string;
}

const {
  class: className = '',
  title = 'Cookie Preferences',
  message = 'We use cookies to enhance your experience. Choose your preferences below. Read about our privacy policy',
  privacyLink = '/privacy',
  position = 'bottom-left',
  id = 'cookie-banner',
} = Astro.props;

const positionClasses = {
  'bottom-left': 'bottom-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',
};
---

<!-- Cookie Banner - initially hidden, positioned bottom-left --><!-- Progressive Enhancement: Non-critical functionality loaded with client:idle -->
<div
  id={id}
  class={`opacity-0 translate-y-full transition-all duration-300 ease-in-out fixed inset-x-0 bottom-0 z-40 ${className}`}
  style="display: none;"
  data-testid="cookie-consent-banner"
>
  <div
    class={`fixed ${positionClasses[position]} z-40 max-w-[360px] rounded-lg text-white p-4 shadow-lg bg-card`}
  >
    <div class="flex flex-col gap-3">
      <div>
        <h2 class="mb-1 text-sm font-medium">{title}</h2>
        <p class="text-xs text-secondary">
          {message}
          <a
            href={privacyLink}
            target="_blank"
            rel="noopener noreferrer"
            class="text-white hover:text-gray-300 underline">here</a
          >.
        </p>
      </div>
      <div class="flex gap-2 justify-between">
        <button
          id="cookie-settings"
          class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] underline-offset-4 hover:underline border-0 h-7 px-3 text-sm cursor-pointer text-white hover:text-gray-300"
          aria-label="Open cookie settings"
        >
          Settings
        </button>
        <div class="flex gap-2">
          <button
            id="cookie-reject"
            class="inline-flex items-center justify-center gap-2 border border-white/20 whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] shadow-sm h-7 px-3 text-sm cursor-pointer text-white hover:bg-white/10"
            aria-label="Reject all cookies"
          >
            Reject
          </button>
          <button
            id="cookie-accept"
            class="inline-flex items-center justify-center gap-2 border border-transparent whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] shadow-sm h-7 px-3 text-sm cursor-pointer bg-accent text-accent-foreground hover:bg-accent/90"
            aria-label="Accept all cookies"
          >
            Accept
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Simplified cookie consent implementation compliant with CLAUDE.md -->
<script is:inline>
  // Self-contained cookie consent functionality using Tailwind transitions
  (function() {
    'use strict';
    
    // Check if consent was already given
    const existingConsent = localStorage.getItem('cookieConsent');
    const banner = document.getElementById('cookie-banner');

    if (existingConsent || !banner) return;

    // Simple state management
    let isVisible = false;
    let isAnimating = false;

    // Show banner function using Tailwind classes
    function showBanner() {
      if (isVisible || isAnimating) return;
      
      isAnimating = true;
      banner.style.display = 'block';
      
      // Force reflow to ensure transition works
      banner.offsetHeight;
      
      // Remove hiding classes to trigger CSS transition
      banner.classList.remove('opacity-0', 'translate-y-full');
      banner.classList.add('opacity-100', 'translate-y-0');
      
      isVisible = true;
      setTimeout(() => {
        isAnimating = false;
      }, 300);
    }

    // Hide banner function using Tailwind classes
    function hideBanner() {
      if (!isVisible || isAnimating) return;
      
      isAnimating = true;
      
      // Add hiding classes to trigger CSS transition
      banner.classList.remove('opacity-100', 'translate-y-0');
      banner.classList.add('opacity-0', 'translate-y-full');
      
      isVisible = false;
      setTimeout(() => {
        isAnimating = false;
        banner.style.display = 'none';
      }, 300);
    }

    // Handle consent
    function setCookieConsent(value) {
      try {
        localStorage.setItem('cookieConsent', value);
        
        // Dispatch custom event
        if ('CustomEvent' in window) {
          const event = new CustomEvent('cookieConsentChanged', {
            detail: { consent: value },
          });
          document.dispatchEvent(event);
        }
        
        hideBanner();
      } catch (error) {
        console.warn('Could not save cookie consent preference:', error);
      }
    }

    // Button click handlers
    document.getElementById('cookie-accept')?.addEventListener('click', () => {
      setCookieConsent('accepted');
    });
    
    document.getElementById('cookie-reject')?.addEventListener('click', () => {
      setCookieConsent('rejected');
    });
    
    document.getElementById('cookie-settings')?.addEventListener('click', () => {
      setCookieConsent('settings');
    });

    // Keyboard support (Escape key)
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isVisible) {
        setCookieConsent('rejected');
      }
    });

    // Show banner after delay
    setTimeout(() => {
      if (!localStorage.getItem('cookieConsent')) {
        showBanner();
      }
    }, 1000);
  })();
</script>
