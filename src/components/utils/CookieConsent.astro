---
/**
 * Cookie consent banner component matching original implementation
 *
 * @example
 * ```astro
 * <CookieConsent
 *   title="Cookie Preferences"
 *   position="bottom-left"
 *   privacyLink="/privacy"
 * />
 * ```
 */

interface Props {
  /** Additional CSS classes */
  class?: string;
  /** Title of the cookie banner */
  title?: string;
  /** Main message text */
  message?: string;
  /** Privacy policy link */
  privacyLink?: string;
  /** Position of the banner */
  position?: 'bottom-left' | 'bottom-right' | 'bottom-center';
  /** HTML id attribute */
  id?: string;
}

const {
  class: className = '',
  title = 'Cookie Preferences',
  message = 'We use cookies to enhance your experience. Choose your preferences below. Read about our privacy policy',
  privacyLink = '/privacy',
  position = 'bottom-left',
  id = 'cookie-banner',
} = Astro.props;

const positionClasses = {
  'bottom-left': 'bottom-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',
};
---

<!-- Cookie Banner - initially hidden, positioned bottom-left --><!-- Progressive Enhancement: Non-critical functionality loaded with client:idle -->
<div
  id={id}
  class={`opacity-0 translate-y-full transition-all duration-300 ease-in-out fixed inset-x-0 bottom-0 z-40 ${className}`}
  data-testid="cookie-consent-banner"
>
  <div
    class={`fixed ${positionClasses[position]} z-40 max-w-[360px] rounded-lg text-white p-4 shadow-lg bg-card`}
  >
    <div class="flex flex-col gap-3">
      <div>
        <h2 class="mb-1 text-sm font-medium">{title}</h2>
        <p class="text-xs text-secondary">
          {message}
          <a
            href={privacyLink}
            target="_blank"
            rel="noopener noreferrer"
            class="text-white hover:text-gray-300 underline">here</a
          >.
        </p>
      </div>
      <div class="flex gap-2 justify-between">
        <button
          id="cookie-settings"
          class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] underline-offset-4 hover:underline border-0 h-7 px-3 text-sm cursor-pointer text-white hover:text-gray-300"
          aria-label="Open cookie settings"
        >
          Settings
        </button>
        <div class="flex gap-2">
          <button
            id="cookie-reject"
            class="inline-flex items-center justify-center gap-2 border border-white/20 whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] shadow-sm h-7 px-3 text-sm cursor-pointer text-white hover:bg-white/10"
            aria-label="Reject all cookies"
          >
            Reject
          </button>
          <button
            id="cookie-accept"
            class="inline-flex items-center justify-center gap-2 border border-transparent whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] shadow-sm h-7 px-3 text-sm cursor-pointer bg-accent text-accent-foreground hover:bg-accent/90"
            aria-label="Accept all cookies"
          >
            Accept
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Performance-optimized cookie consent -->
<script>
  // Optimized cookie consent functionality with performance considerations
  function initializeCookieConsent() {
    // Check if consent was already given to avoid unnecessary operations
    const consentGiven = localStorage.getItem('cookieConsent');
    const banner = document.getElementById('cookie-banner');

    if (consentGiven || !banner) return;

    // Performance-optimized banner display with IntersectionObserver
    const showBannerWithDelay = () => {
      // Use requestIdleCallback for non-blocking execution
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
          setTimeout(() => {
            if (!localStorage.getItem('cookieConsent')) {
              requestAnimationFrame(() => {
                banner.style.opacity = '1';
                banner.style.transform = 'translateY(0)';
              });
            }
          }, 1000);
        });
      } else {
        // Fallback for browsers without requestIdleCallback
        setTimeout(() => {
          if (!localStorage.getItem('cookieConsent')) {
            banner.style.opacity = '1';
            banner.style.transform = 'translateY(0)';
          }
        }, 1000);
      }
    };

    const hideBanner = () => {
      requestAnimationFrame(() => {
        banner.style.opacity = '0';
        banner.style.transform = 'translateY(100vh)';

        // Remove from DOM after animation for better performance
        setTimeout(() => {
          if (banner.parentNode) {
            banner.parentNode.removeChild(banner);
          }
        }, 300);
      });
    };

    const setCookieConsent = (value) => {
      try {
        localStorage.setItem('cookieConsent', value);
        hideBanner();

        // Dispatch custom event for analytics or other tracking
        if ('CustomEvent' in window) {
          const event = new CustomEvent('cookieConsentChanged', {
            detail: { consent: value },
          });
          document.dispatchEvent(event);
        }
      } catch (error) {
        console.warn('Could not save cookie consent preference:', error);
      }
    };

    // Optimized event delegation for better performance
    const handleButtonClick = (e) => {
      const target = e.target;
      if (!target.matches('button')) return;

      switch (target.id) {
        case 'cookie-accept':
          setCookieConsent('accepted');
          break;
        case 'cookie-reject':
          setCookieConsent('rejected');
          break;
        case 'cookie-settings':
          setCookieConsent('settings');
          break;
      }
    };

    // Use event delegation for better performance
    banner.addEventListener('click', handleButtonClick, { passive: true });

    // Enhanced keyboard support
    banner.addEventListener(
      'keydown',
      (e) => {
        if (e.key === 'Escape') {
          setCookieConsent('rejected');
        }
      },
      { passive: false }
    );

    // Show banner with optimized timing
    showBannerWithDelay();

    // Cleanup function for memory management
    window.addEventListener('beforeunload', () => {
      banner.removeEventListener('click', handleButtonClick);
    });
  }

  // Initialize when browser is idle
  initializeCookieConsent();
</script>
