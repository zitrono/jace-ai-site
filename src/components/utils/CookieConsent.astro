---
/**
 * Cookie consent banner component matching original implementation
 *
 * @example
 * ```astro
 * <CookieConsent
 *   title="Cookie Preferences"
 *   position="bottom-left"
 *   privacyLink="/privacy"
 * />
 * ```
 */

import type { BaseComponentProps } from '@/types/components';

export interface Props extends BaseComponentProps {
  /** Title of the cookie banner */
  title?: string;
  /** Main message text */
  message?: string;
  /** Privacy policy link */
  privacyLink?: string;
  /** Position of the banner */
  position?: 'bottom-left' | 'bottom-right' | 'bottom-center';
  /** HTML id attribute */
  id?: string;
}

const {
  class: className = '',
  title = 'Cookie Preferences',
  message = 'We use cookies to enhance your experience. Choose your preferences below. Read about our privacy policy',
  privacyLink = '/privacy',
  position = 'bottom-left',
  id = 'cookie-banner',
} = Astro.props;

const positionClasses = {
  'bottom-left': 'bottom-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',
};
---

<!-- Cookie Banner - initially hidden, positioned bottom-left --><!-- Progressive Enhancement: Non-critical functionality loaded with client:idle -->
<div
  id={id}
  class={`opacity-0 translate-y-full transition-all duration-300 ease-in-out fixed inset-x-0 bottom-0 z-40 ${className}`}
  data-testid="cookie-consent-banner"
>
  <div
    class={`fixed ${positionClasses[position]} z-40 max-w-[360px] rounded-lg text-white p-4 shadow-lg bg-card`}
  >
    <div class="flex flex-col gap-3">
      <div>
        <h2 class="mb-1 text-sm font-medium">{title}</h2>
        <p class="text-xs text-secondary">
          {message}
          <a
            href={privacyLink}
            target="_blank"
            rel="noopener noreferrer"
            class="text-white hover:text-gray-300 underline">here</a
          >.
        </p>
      </div>
      <div class="flex gap-2 justify-between">
        <button
          id="cookie-settings"
          class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] underline-offset-4 hover:underline border-0 h-7 px-3 text-sm cursor-pointer text-white hover:text-gray-300"
          aria-label="Open cookie settings"
        >
          Settings
        </button>
        <div class="flex gap-2">
          <button
            id="cookie-reject"
            class="inline-flex items-center justify-center gap-2 border border-white/20 whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] shadow-sm h-7 px-3 text-sm cursor-pointer text-white hover:bg-white/10"
            aria-label="Reject all cookies"
          >
            Reject
          </button>
          <button
            id="cookie-accept"
            class="inline-flex items-center justify-center gap-2 border border-transparent whitespace-nowrap rounded-md font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 active:scale-[.99] shadow-sm h-7 px-3 text-sm cursor-pointer bg-accent text-accent-foreground hover:bg-accent/90"
            aria-label="Accept all cookies"
          >
            Accept
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Performance-optimized cookie consent with centralized state and focus management -->
<script type="module">
  import { cookieBannerSlideUp, cookieBannerSlideDown, initAnimationSystem } from '../../utils/animation-manager.js';
  import { initializeStateManager } from '../../utils/state-manager.js';
  import { FocusManager } from '../../utils/focus-manager.js';

  // Optimized cookie consent functionality with centralized state and focus management
  function initializeCookieConsent() {
    // Initialize systems
    initAnimationSystem();
    const stateManager = initializeStateManager();
    
    // Check if consent was already given to avoid unnecessary operations
    const existingConsent = localStorage.getItem('cookieConsent');
    const banner = document.getElementById('cookie-banner');

    if (existingConsent || !banner) return;

    // Initialize focus manager for cookie banner
    const focusManager = new FocusManager(banner, {
      autoFocus: false, // Don't auto-focus banner when it appears
      handleEscape: true, // Allow escape to close banner
      onEscape: () => {
        // Reject cookies when escape is pressed
        stateManager.setState('cookieConsent', { 
          consentValue: 'rejected',
          isVisible: false 
        }, { source: 'focus-manager-escape' });
      }
    });
    
    // Connect focus manager to state manager
    focusManager.setStateManager(stateManager, 'cookieConsent');

    // Store active animation for cleanup
    let bannerAnimation = null;

    // Initialize cookie consent state
    stateManager.setState('cookieConsent', { 
      consentValue: existingConsent || null,
      isVisible: false,
      isAnimating: false
    }, { silent: true });

    // Subscribe to cookie consent state changes
    const unsubscribe = stateManager.subscribe('cookieConsent', (newState, oldState, _source) => {
      // Handle visibility changes
      if (newState.isVisible !== oldState.isVisible) {
        if (newState.isVisible) {
          performShowBanner();
        } else {
          performHideBanner();
        }
      }
      
      // Handle consent value changes
      if (newState.consentValue !== oldState.consentValue && newState.consentValue) {
        handleConsentChange(newState.consentValue);
      }
      
      // Handle animation state
      if (newState.isAnimating !== oldState.isAnimating) {
        if (newState.isAnimating) {
          banner.classList.add('is-animating');
        } else {
          banner.classList.remove('is-animating');
        }
      }
      
      // Handle focus management based on state changes
      if (newState.isVisible !== oldState.isVisible) {
        if (newState.isVisible) {
          // Enable keyboard navigation when banner becomes visible
          // Note: We don't auto-focus to avoid disrupting user flow
          focusManager.enableFocusTrap();
        } else {
          // Disable focus trap when banner is hidden
          focusManager.disableFocusTrap();
        }
      }
    });

    // Show banner implementation
    const performShowBanner = () => {
      const state = stateManager.getState('cookieConsent');
      if (state.isVisible && state.isAnimating) return; // Prevent race conditions
      
      // Update state to show animating
      stateManager.setState('cookieConsent', { isAnimating: true }, { source: 'show-start' });
      
      // Clean up any existing animation
      if (bannerAnimation) {
        bannerAnimation.cleanup();
        bannerAnimation = null;
      }

      bannerAnimation = cookieBannerSlideUp(banner, {
        duration: 300,
        onComplete: () => {
          // Update state - animation complete
          stateManager.setState('cookieConsent', { isAnimating: false }, { source: 'show-complete' });
          bannerAnimation = null;
        }
      });
    };

    // Hide banner implementation
    const performHideBanner = () => {
      const state = stateManager.getState('cookieConsent');
      if (!state.isVisible && state.isAnimating) return; // Prevent race conditions
      
      // Update state to show animating
      stateManager.setState('cookieConsent', { isAnimating: true }, { source: 'hide-start' });
      
      // Clean up any existing animation
      if (bannerAnimation) {
        bannerAnimation.cleanup();
        bannerAnimation = null;
      }

      bannerAnimation = cookieBannerSlideDown(banner, {
        duration: 300,
        onComplete: () => {
          // Remove from DOM after animation for better performance
          if (banner.parentNode) {
            banner.parentNode.removeChild(banner);
          }
          
          // Update state - animation complete
          stateManager.setState('cookieConsent', { isAnimating: false }, { source: 'hide-complete' });
          bannerAnimation = null;
        }
      });
    };

    // Handle consent changes
    const handleConsentChange = (value) => {
      try {
        localStorage.setItem('cookieConsent', value);
        
        // Dispatch custom event for analytics or other tracking
        if ('CustomEvent' in window) {
          const event = new CustomEvent('cookieConsentChanged', {
            detail: { consent: value },
          });
          document.dispatchEvent(event);
        }
      } catch (error) {
        console.warn('Could not save cookie consent preference:', error);
      }
    };

    // Set cookie consent function
    const setCookieConsent = (value) => {
      stateManager.setState('cookieConsent', { 
        consentValue: value,
        isVisible: false 
      }, { source: 'user-action' });
    };

    // Performance-optimized banner display with unified animation
    const showBannerWithDelay = () => {
      // Use requestIdleCallback for non-blocking execution
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
          setTimeout(() => {
            const currentConsent = localStorage.getItem('cookieConsent');
            if (!currentConsent) {
              stateManager.setState('cookieConsent', { isVisible: true }, { source: 'auto-show' });
            }
          }, 1000);
        });
      } else {
        // Fallback for browsers without requestIdleCallback
        setTimeout(() => {
          const currentConsent = localStorage.getItem('cookieConsent');
          if (!currentConsent) {
            stateManager.setState('cookieConsent', { isVisible: true }, { source: 'auto-show' });
          }
        }, 1000);
      }
    };

    // Optimized event delegation for better performance
    const handleButtonClick = (e) => {
      const target = e.target;
      if (!target.matches('button')) return;

      switch (target.id) {
        case 'cookie-accept':
          setCookieConsent('accepted');
          break;
        case 'cookie-reject':
          setCookieConsent('rejected');
          break;
        case 'cookie-settings':
          setCookieConsent('settings');
          break;
      }
    };

    // Use event delegation for better performance
    banner.addEventListener('click', handleButtonClick, { passive: true });

    // Keyboard support is now handled by the centralized FocusManager

    // Show banner with optimized timing
    showBannerWithDelay();

    // Cleanup function
    const cleanup = () => {
      if (bannerAnimation) {
        bannerAnimation.cleanup();
        bannerAnimation = null;
      }
      focusManager.destroy();
      banner.removeEventListener('click', handleButtonClick);
      unsubscribe();
    };

    window.addEventListener('beforeunload', cleanup);
    
    // Return cleanup for external use
    return cleanup;
  }

  // Initialize when browser is idle
  let _cleanup = null;
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      _cleanup = initializeCookieConsent();
    });
  } else {
    _cleanup = initializeCookieConsent();
  }
</script>
